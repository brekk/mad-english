import Ap from "Applicative"
import { read } from "File"
import IO from "IO"
import List from "List"
import { Just, Nothing } from "Maybe"
import String from "String"
import { assertEquals, test } from "Test"
import Wish from "Wish"



traceDrop :: Show a => String -> a -> {}
traceDrop = (tag, x) => {
  IO.trace(tag, x)
}

isntEmpty :: String -> Boolean
isntEmpty = (x) => !String.isEmpty(x)

cleanLines :: String -> List String
cleanLines = pipe(
  String.lines,
  List.filter(isntEmpty),
)

pipe(
  Ap.liftA2(
    (input, output) => List.zip(cleanLines(input), cleanLines(output)),
    read("./corpus-output.txt"),
  ),
  map(
    map(where { #[input, output] => test(`stemmer: ${input}`, () => assertEquals(output, input)) }),
  ),
  Wish.fulfill(traceDrop("Something broke"), traceDrop("tests generated!")),
)(read("./corpus-input.txt"))
