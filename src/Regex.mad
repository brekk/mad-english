import type { Maybe } from "Maybe"

import IO from "IO"
import { Just, Nothing } from "Maybe"



export type Regex = Regex(String, String) | InvalidRegex



UnflaggedRegex :: String -> Regex
export UnflaggedRegex = (x) => Regex(x, "")

__rg :: String -> String -> Regex
__rg = (pattern, flags) => #- {
  return new RegExp(pattern, flags)
} -#

__match :: String -> String -> Boolean
__match = (pattern, flags) => pipe(
  __rg(pattern),
  IO.trace("PATTERNITY"),
  (r) => #- input.match(r) !== null -#,
)(flags)

match :: Regex -> String -> Boolean
export match = (rg, input) => where(rg) {
  Regex(pattern, flags) =>
    __match(pattern, flags)

  InvalidRegex =>
    false
}

__check :: String -> String -> String -> Boolean
__check = (pattern, flags, input) => pipe(
  __rg(pattern),
  (r) => #- {
    return r && !!r.test(input)
  } -#,
)(flags)

check :: Regex -> String -> Boolean
export check = (rg, input) => where(rg) {
  Regex(pattern, flags) =>
    __check(pattern, flags, input)

  InvalidRegex =>
    false
}

__replace :: String -> String -> String -> String
__replace = (pattern, flags, replacement) => pipe(
  __rg(pattern),
  (r) => #- {
    return input.replace(r, replacement)
  } -#,
)(flags)

replace :: Regex -> String -> String -> String
export replace = (rg, replacement, input) => where(rg) {
  Regex(pattern, flags) =>
    __replace(pattern, flags, replacement)

  InvalidRegex =>
    input
}

alias SearchMatch = #[Maybe String, Maybe String]

__search :: String -> String -> String -> SearchMatch
__search = (pattern, flags, input) => pipe(
  __rg($, flags),
  (r) => #- {
    const searched = r.exec(input) || []
    const [_i, a = "", b = ""] = searched
    return { a, b }
  } -#,
  (x) => #[x.a == "" ? Nothing : Just(x.a), x.b == "" ? Nothing : Just(x.b)],
)(pattern)

search :: Regex -> String -> SearchMatch
export search = (rg, input) => where(rg) {
  Regex(pattern, flags) =>
    __search(pattern, flags, input)

  InvalidRegex =>
    #[Nothing, Nothing]
}
