import { assertEquals, test } from "Test"

import { InvalidRegex, Regex } from "./Regex"
import {
  SUFFIX_EED,
  SUFFIX_LL,
  append,
  dealWithLeadingY,
  matchesSuffix,
  prepend,
  sliceToEnd,
  stepOneA,
  stepOneB,
} from "./Stemmer"



test("prepend", () => assertEquals("squibblebib", prepend("squibble", "bib")))
test("append", () => assertEquals("bibsquibble", append("squibble", "bib")))
test("sliceToEnd", () => assertEquals("squibble", sliceToEnd(3, "bibsquibble")))

test("dealWithLeadingY - match", () => assertEquals("Y???", dealWithLeadingY("y???")))
test("dealWithLeadingY - no match", () => assertEquals("?", dealWithLeadingY("?")))
test("dealWithLeadingY - nothing match", () => assertEquals("", dealWithLeadingY("")))

test("stepOneA", () => assertEquals("issue", stepOneA("issues")))
test(
  "matchesSuffix",
  () => assertEquals([true, false], map(matchesSuffix(SUFFIX_EED))(["indeed", "quest"])),
)
test("matchesSuffix - no", () => assertEquals(false, matchesSuffix(InvalidRegex, "quest")))
test(
  "matchesSuffix - unmatched",
  () => assertEquals(
    false,
    matchesSuffix(
      Regex("/quick\s(?<color>brown).+?(jumps)", "dgi"),
      "The Quick Brown Fox Jumps Over The Lazy Dog",
    ),
  ),
)
test(
  "stepOneB",
  () => assertEquals(
    ["e", "need", "reed", "seed", "peed", "cede", "lede", "", "indeed", "concede", "intercede"],
    map(stepOneB)([
      "needing",
      "need",
      "reed",
      "seed",
      "peed",
      "cede",
      "led",
      "",
      "indeed",
      "concede",
      "intercede",
    ]),
  ),
)
