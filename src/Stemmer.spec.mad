import { assertEquals, test } from "Test"

import { InvalidRegex, Regex } from "./Regex"
import {
  SUFFIX_EED,
  SUFFIX_LL,
  append,
  dealWithLeadingY,
  matchesSuffix,
  prepend,
  sliceToEnd,
  stepFive,
  stepFour,
  stepOneA,
  stepOneB,
  stepOneC,
  stepSix,
  stepThree,
  stepTwo,
} from "./Stemmer"



test("prepend", () => assertEquals("squibblebib", prepend("squibble", "bib")))
test("append", () => assertEquals("bibsquibble", append("squibble", "bib")))
test("sliceToEnd", () => assertEquals("squibble", sliceToEnd(3, "bibsquibble")))

test("dealWithLeadingY - match", () => assertEquals("Y???", dealWithLeadingY("y???")))
test("dealWithLeadingY - no match", () => assertEquals("?", dealWithLeadingY("?")))
test("dealWithLeadingY - nothing match", () => assertEquals("", dealWithLeadingY("")))

test("stepOneA", () => assertEquals("issue", stepOneA("issues")))
test(
  "matchesSuffix",
  () => assertEquals([true, false], map(matchesSuffix(SUFFIX_EED))(["indeed", "quest"])),
)
test("matchesSuffix - no", () => assertEquals(false, matchesSuffix(InvalidRegex, "quest")))
test(
  "matchesSuffix - unmatched",
  () => assertEquals(
    false,
    matchesSuffix(
      Regex("/quick\s(?<color>brown).+?(jumps)", "dgi"),
      "The Quick Brown Fox Jumps Over The Lazy Dog",
    ),
  ),
)
test(
  "stepOneB",
  () => assertEquals(
    ["e", "need", "reed", "seed", "peed", "cede", "lede", "", "indeed", "concede", "intercede"],
    map(stepOneB)([
      "needing",
      "need",
      "reed",
      "seed",
      "peed",
      "cede",
      "led",
      "",
      "indeed",
      "concede",
      "intercede",
    ]),
  ),
)

test(
  "stepOneC",
  () => assertEquals(["ei", "ai", "ri", "hi"], map(stepOneC)(["needy", "lazy", "crazy", "ahoy"])),
)

test(
  "stepTwo",
  () => assertEquals(
    ["rate", "rotate", "silences", "energize", "organize"],
    map(stepTwo)(["rational", "rotational", "silences", "energizer", "organization"]),
  ),
)

test(
  "stepThree",
  () => assertEquals(
    ["predic", "gener", "radical", "duplic", "fantastic"],
    map(stepThree)(["predicate", "generative", "radicalize", "dupliciti", "fantastical"]),
  ),
)

test(
  "stepFour",
  () => assertEquals(
    ["bal", "val", "sci", "new", "gener", "st", "quibble", "cruc", "c", "c", "mo"],
    map(stepFour)([
      "balance",
      "valence",
      "science",
      "newer",
      "generic",
      "stable",
      "quibble",
      "crucible",
      "cant",
      "cement",
      "moment",
    ]),
  ),
)

test(
  "stepFive",
  () => assertEquals(
    ["ced", "led", "please", "ease", "aisle"],
    map(stepFive)(["cede", "lede", "please", "ease", "aisle"]),
  ),
)

test(
  "stepSix",
  () => assertEquals(
    ["will", "wills", "ill", "ills", "ails", "bells"],
    map(stepSix)(["will", "wills", "ill", "ills", "ails", "bells"]),
  ),
)
