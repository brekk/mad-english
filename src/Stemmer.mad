import type { Regex } from "./Regex"

import { gt } from "Compare"
import Dict from "Dictionary"
import Fn from "Function"
import IO from "IO"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import {} from "Number"
import String from "String"

import { Regex, UnflaggedRegex, check, match, query, replace, search } from "./Regex"



unless = Fn.ifElse($, Fn.identity)

prepend :: String -> String -> String
export prepend = (before, x) => before ++ x

append :: String -> String -> String
export append = (after, x) => prepend(x, after)

sliceToEnd :: Integer -> String -> String
export sliceToEnd = (x, str) => pipe(
  String.slice(x, String.length(str)),
)(str)


export PASS_2_MAP = Dict.fromList([
  #["ational", "ate"],
  #["tional", "tion"],
  #["enci", "ence"],
  #["anci", "ance"],
  #["izer", "ize"],
  #["bli", "ble"],
  #["alli", "al"],
  #["entli", "ent"],
  #["eli", "e"],
  #["ousli", "ous"],
  #["ization", "ize"],
  #["ation", "ate"],
  #["ator", "ate"],
  #["alism", "al"],
  #["iveness", "ive"],
  #["fulness", "ful"],
  #["ousness", "ous"],
  #["aliti", "al"],
  #["iviti", "ive"],
  #["biliti", "ble"],
  #["logi", "log"],
])

export PASS_3_MAP = Dict.fromList([
  #["icate", "ic"],
  #["ative", ""],
  #["alize", "al"],
  #["iciti", "ic"],
  #["ical", "ic"],
  #["ful", ""],
  #["ness", ""],
])

export CONSONANT = "[^aeiou]"
export VOWEL = "[aeiouy]"
export CONSONANTS = "(" ++ CONSONANT ++ "[^aeiouy]*)"
export VOWELS = "(" ++ VOWEL ++ "[aeiou]*)"

export LOGIC_GT0 = UnflaggedRegex("^" ++ CONSONANTS ++ "?" ++ VOWELS ++ CONSONANTS)
export LOGIC_EQ1 = UnflaggedRegex(
  "^" ++ CONSONANTS ++ "?" ++ VOWELS ++ CONSONANTS ++ VOWELS ++ "?$",
)
export LOGIC_GT1 = UnflaggedRegex("^" ++ CONSONANTS ++ "?(" ++ VOWELS ++ CONSONANTS ++ "){2,}")
export VOWEL_IN_STEM = UnflaggedRegex("^" ++ CONSONANTS ++ "?" ++ VOWEL)
export CONSONANT_LIKE = UnflaggedRegex("^" ++ CONSONANTS ++ VOWEL ++ "[^aeiouwxy]$")

export SUFFIX_LL = UnflaggedRegex("ll$")
export SUFFIX_E = UnflaggedRegex("^(.+?)e$")
export SUFFIX_Y = UnflaggedRegex("^(.+?)y$")
export SUFFIX_ION = UnflaggedRegex("^(.+?(s|t))(ion)$")
export SUFFIX_ED_ING = UnflaggedRegex("^(.+?)(ed|ing)$")
export SUFFIX_AT_BL_IZ = UnflaggedRegex("(at|bl|iz)$")
export SUFFIX_EED = UnflaggedRegex("^(.+?)eed$")
export SUFFIX_S = UnflaggedRegex("^.+?[^s]s$")
export SUFFIX_SSES_IES = UnflaggedRegex("^.+?(ss|i)es$")
export SUFFIX_CONSONANT_LIKE = UnflaggedRegex("([^aeiouylsz])\\1$")
export PASS_2 = UnflaggedRegex(
  "^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$",
)
export PASS_3 = UnflaggedRegex("^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$")
export PASS_4 = UnflaggedRegex(
  "^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$",
)
hasLeadingY :: String -> Boolean
export hasLeadingY = pipe(
  String.firstChar,
  where {
    Just(c0) =>
      Fn.equals('y', c0)

    Nothing =>
      false
  },
)

dealWithLeadingY :: String -> String
export dealWithLeadingY = Fn.when(
  hasLeadingY,
  pipe(
    sliceToEnd(1),
    prepend("Y"),
  ),
)

undealWithLeadingY :: String -> String
export undealWithLeadingY = (raw) => "y" ++ sliceToEnd(1, raw)

stepOneA :: String -> String
export stepOneA = Fn.ifElse(check(SUFFIX_SSES_IES), String.slice(0, -2), String.slice(0, -1))

matchesSuffix :: Regex -> String -> Boolean
export matchesSuffix = (rg, x) => query(
  rg,
  where {
    #[Just(_), _] =>
      true

    #[Nothing, _] =>
      false
  },
  x,
)

stepOneB :: String -> String
export stepOneB = (result) => Fn.ifElse(
  matchesSuffix(SUFFIX_EED),
  pipe(
    query(
      SUFFIX_EED,
      where {
        #[Just(x), _] =>
          pipe(
            String.firstChar,
            map(
              pipe(
                String.singleton,
                Fn.ifElse(
                  check(LOGIC_GT0),
                  Fn.always(String.slice(0, -1, result)),
                  Fn.always(result),
                ),
              ),
            ),
            fromMaybe(result),
          )(x)

        #[Nothing, _] =>
          result
      },
    ),
  ),
  Fn.when(
    matchesSuffix(SUFFIX_ED_ING),
    query(
      SUFFIX_ED_ING,
      where {
        #[Just(x), _] =>
          pipe(
            String.charAt(1),
            map(String.singleton),
            fromMaybe(result),
            Fn.ifElse(
              Fn.either(check(SUFFIX_AT_BL_IZ), check(CONSONANT_LIKE)),
              append("e"),
              Fn.when(check(SUFFIX_CONSONANT_LIKE), String.slice(0, -1)),
            ),
          )(x)

        _ =>
          result
      },
    ),
  ),
)(result)

stepOneC :: String -> String
export stepOneC = Fn.when(
  Fn.both(matchesSuffix(SUFFIX_Y), check(VOWEL_IN_STEM)),
  (raw) => pipe(
    String.charAt(1),
    map((c) => String.singleton(c) ++ "i"),
    fromMaybe(raw),
  )(raw),
)

stepTwo :: String -> String
export stepTwo = Fn.when(
  Fn.both(matchesSuffix(PASS_2), check(LOGIC_GT0)),
  (raw) => query(
    PASS_2,
    where {
      #[Just(a), Just(y)] =>
        pipe(
          Dict.get(y),
          where {
            Just(z) =>
              a ++ z

            Nothing =>
              raw
          },
        )(PASS_2_MAP)

      #[Just(a), Nothing] =>
        raw

      #[Nothing, _] =>
        raw
    },
  )(raw),
)

stepThree :: String -> String
export stepThree = Fn.when(
  Fn.both(matchesSuffix(PASS_3), check(LOGIC_GT0)),
  (raw) => query(
    PASS_3,
    where {
      #[Just(a), Just(y)] =>
        pipe(
          Dict.get(y),
          where {
            Just(z) =>
              a ++ z

            Nothing =>
              raw
          },
        )(PASS_3_MAP)

      #[Just(a), Nothing] =>
        raw

      #[Nothing, _] =>
        raw
    },
  )(raw),
)

stepFour :: String -> String
export stepFour = Fn.ifElse(
  matchesSuffix(PASS_4),
  (raw) => query(
    PASS_4,
    where {
      #[Just(y), _] =>
        y

      #[Nothing, _] =>
        raw
    },
  )(raw),
  (raw) => Fn.when(
    Fn.both(matchesSuffix(SUFFIX_ION), check(LOGIC_GT1)),
    query(
      SUFFIX_ION,
      where {
        #[Just(a), _] =>
          a

        #[Nothing, _] =>
          raw
      },
    ),
  )(raw),
)

stepFive :: String -> String
export stepFive = Fn.when(
  pipe(
    search(SUFFIX_E),
    where {
      #[Just(x), _] =>
        (check(LOGIC_GT1, x) || check(LOGIC_EQ1, x)) && check(CONSONANT_LIKE, x)

      _ =>
        false
    },
  ),
  (raw) => query(
    SUFFIX_E,
    where {
      #[Just(x), _] =>
        x

      _ =>
        raw
    },
    raw,
  ),
)

stepSix :: String -> String
export stepSix = Fn.when(Fn.both(check(SUFFIX_LL), check(LOGIC_GT1)), String.slice(0, -1))

stemmer :: String -> String
export stemmer = pipe(
  String.toLower,
  unless(
    (x) => String.length(x) < 3,
    (raw) => pipe(
      hasLeadingY,
      (leadingY) => pipe(
        dealWithLeadingY,
        stepOneA,
        stepOneB,
        stepOneC,
        stepTwo,
        stepThree,
        stepFour,
        stepFive,
        stepSix,
        leadingY ? undealWithLeadingY : Fn.identity,
      )(raw),
    )(raw),
  ),
)
